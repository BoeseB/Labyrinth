<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAEACAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD2RG0A9kVtAPZFbgD2R28A9khwAPZKcgD2S3IA9k51APZQdgD2UHcA9lJ4APdVegD3V3wA91h9APdZ
        fQD3W38A91yAAPddgQD3XoEA916CAPdfggD3YIMA92KEAPdmiAD4Z4gA+GiJAPhpigD4aosA+G6OAPhx
        kAD4eJUA+HmXAPl8mQD5fpoA+YCcAPmDngD5hJ8A+YWgAPmGoAD5h6EA+YqkAPmMpQD6j6cA+pKqAPqV
        rAD6mrAA+p2zAPqgtQD6obYA+6i7APuqvQD7r8EA+7DBAPuxwgD7ssMA+7fGAPy3xwD7uMcA/LnIAPy8
        ygD8vMsA/MHOAPzBzwD8ws8A/MTRAPzH0wD8yNQA/MnVAPzK1gD8y9YA/dDaAP3U3QD91+AA/djhAP3b
        4wD93uUA/uHoAP7i6QD+5OoA/uXqAP7n7AD+6O0A/uruAP7v8gD+8PQA/vL1AP/19wD/9fgA//f5AP/4
        +QD/+PoA//n6AP/6+wD/+/wA//z9AP/9/QD//v4A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAETmFhYWFhYWFhYWFhYWFhYT4AAAAAAAAAAAAAAAAAAAAAJGFhYWFh
        YWFhYWFhYWFhYQAAAAAAAAAAAAAAAAAABE5hYWFhYWFhYWFhYWFhYWE+AAAAAAAAAAAAAAAAAAAAF2Fh
        YWFhYWFhYWFhYWFhYWEAAAAAAAAAAAAAAAAAAAROYWFhYWFhYWFhYWFhYWFhPgAAAAAAAAAAAAAAAAAA
        BE5hYWFhYWFhYWFhYWFhYWFhAAAAAAAAAAAAAAAAAAAETmFhYWFhYWFhYWFhYWFhYT4AAAAAAAAAAAAA
        AAAAAD9hYWFhYWFhYWFhYWFhYWFhYQAAAAAAAAAAAAAAAAAABE5hYWFhYWFhYWFhYWFhYWE+AAAAAAAA
        AAAAAAAAACthYWFhYWFhYWFhYWFhYWFhYWEAAAAAAAAAAAAAAAAAAAROYWFhYWFhYWFhYWFhYWFhPgAA
        AAAAAAAAAAAAAA5eYWFhYWFhYWFhYWFhYWFhYWFhAAAAAAAAAAAAAAAAAAAETmFhYWFhYWFhYWFhYWFh
        YT4AAAAAAAAAAAAAAAZWYWFhYWFhYWFhYWFhYWFhYWFhYQAAAAAAAAAAAAAAAAAABE5hYWFhYWFhYWFh
        YWFhYWE+AAAAAAAAAAAAAAA5YWFhYWFhYWFhYWFhYWFhYWFhYS0AAAAAAAAAAAAAAAAAAAROYWFhYWFh
        YWFhYWFhYWFhPgAAAAAAAAAAAAAoYWFhYWFhYWFhYWFhYWFhYWFhYUcAAAAAAAAAAAAAAAAAAAAETmFh
        YWFhYWFhYWFhYWFhYT4AAAAAAAAAAAATWmFhYWFhYWFhYWFhYWFhYWFhYVEDAAAAAAAAAAAAAAAAAAAA
        BE5hYWFhYWFhYWFhYWFhYWE+AAAAAAAAAAABTmFhYWFhYWFhYWFhYWFhYWFhYWEcAAAAAAAAAAAAAAAA
        AAAAAAROYWFhYWFhYWFhYWFhYWFhPgAAAAAAAAAAQmFhYWFhYWFhYWFhYWFhYWFhYWEmAAAAAAAAAAAA
        AAAAAAAAAAAETmFhYWFhYWFhYWFhYWFhYT0AAAAAAAAAI2FhYWFhYWFhYWFhYWFhYWFhYWFAAAAAAAAA
        AAAAAAAAAAAAAAAABE5hYWFhYWFhYWFhYWFhYWFKAAAAAAAAEmFhYWFhYWFhYWFhYWFhYWFhYWFUAAAA
        AAAAAAAAAAAAAAAAAAAAAAROYWFhYWFhYWFhYWFhYWFhYUAAAAAAAExhYWFhYWFhYWFhYWFhYWFhYWFb
        FAAAAAAAAAAAAAAAAAAAAAAAAAAETmFhYWFhYWFhYWFhYWFhYWFhKgAAADdhYWFhYWFhYWFhYWFhYWFh
        YWFhKwAAAAAAAAAAAAAAAAAAAAAAAAAABE5hYWFhYWFhYWFhYWFhYWFhYWEnAChhYWFhYWFhYWFhYWFh
        YWFhYWFhMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAROYWFhYWFhYWFhYWFhYWFhYWFhVx1ZYWFhYWFhYWFh
        YWFhYWFhYWFhTwUAAAAAAAAAAAAAAAAAAAAAAAAAAAAETmFhYWFhYWFhYWFhYWFhYWFhYWFgYWFhYWFh
        YWFhYWFhYWFhYWFhXQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAABE5hYWFhYWFhYWFhYWFhYWFhYWFhYWFh
        YWFhYWFhYWFhYWFhYWFhYSEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAROYWFhYWFhYWFhYWFhYWFhYWFh
        YWFhYWFhYWFhYWFhYWFhYWFhYTUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAETmFhYWFhYWFhYWFhYWFh
        YWFhYWFhYWFhYWFhYWFhYWFhYWFhYUcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABE5hYWFhYWFhYWFh
        YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYV4LAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAROYWFhYWFh
        YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWAZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAETmFh
        YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWExAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        BE5hYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAROYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFVBwIAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAETmFhYWFhYWFhYWFhYWFhYU5hYWFhYWFhYWFhYWFhYWFhXhsAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAABE5hYWFhYWFhYWFhYWFhYWE8JWFhYWFhYWFhYWFhYWFhYWFcFgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAROYWFhYWFhYWFhYWFhYWFhPgBFYWFhYWFhYWFhYWFhYWFhYVIHAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAETmFhYWFhYWFhYWFhYWFhYT4AAElhYWFhYWFhYWFhYWFhYWFhSgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABE5hYWFhYWFhYWFhYWFhYWE+AAAPWGFhYWFhYWFhYWFhYWFh
        YWE7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAROYWFhYWFhYWFhYWFhYWFhPgAAABthYWFhYWFhYWFh
        YWFhYWFhYTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAETmFhYWFhYWFhYWFhYWFhYT4AAAAALmFhYWFh
        YWFhYWFhYWFhYWFhIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABE5hYWFhYWFhYWFhYWFhYWE+AAAAAABG
        YWFhYWFhYWFhYWFhYWFhYWENAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAROYWFhYWFhYWFhYWFhYWFhPgAA
        AAAAAU9hYWFhYWFhYWFhYWFhYWFhVwsAAAAAAAAAAAAAAAAAAAAAAAAAAAAETmFhYWFhYWFhYWFhYWFh
        YT4AAAAAAAAVYWFhYWFhYWFhYWFhYWFhYWFLAAAAAAAAAAAAAAAAAAAAAAAAAAAABE5hYWFhYWFhYWFh
        YWFhYWE+AAAAAAAAAB9hYWFhYWFhYWFhYWFhYWFhYUQCAAAAAAAAAAAAAAAAAAAAAAAAAAROYWFhYWFh
        YWFhYWFhYWFhPgAAAAAAAAAAOGFhYWFhYWFhYWFhYWFhYWFhLQAAAAAAAAAAAAAAAAAAAAAAAAAETmFh
        YWFhYWFhYWFhYWFhYT4AAAAAAAAAAABDYWFhYWFhYWFhYWFhYWFhYWEsAAAAAAAAAAAAAAAAAAAAAAAA
        BE5hYWFhYWFhYWFhYWFhYWE+AAAAAAAAAAACCVNhYWFhYWFhYWFhYWFhYWFhXhgAAAAAAAAAAAAAAAAA
        AAAAAAROYWFhYWFhYWFhYWFhYWFhPgAAAAAAAAAAAAAQYWFhYWFhYWFhYWFhYWFhYWFfEQAAAAAAAAAA
        AAAAAAAAAAAETmFhYWFhYWFhYWFhYWFhYT4AAAAAAAAAAAAAAChhYWFhYWFhYWFhYWFhYWFhYU0EAAAA
        AAAAAAAAAAAAAAAABE5hYWFhYWFhYWFhYWFhYWE+AAAAAAAAAAAAAAAAP2FhYWFhYWFhYWFhYWFhYWFh
        TAAAAAAAAAAAAAAAAAAAAAROYWFhYWFhYWFhYWFhYWFhPgAAAAAAAAAAAAAAAABIYWFhYWFhYWFhYWFh
        YWFhYWE2AAAAAAAAAAAAAAAAAAAETmFhYWFhYWFhYWFhYWFhYT4AAAAAAAAAAAAAAAAADGBhYWFhYWFh
        YWFhYWFhYWFhYQAAAAAAAAAAAAAAAAAABE5hYWFhYWFhYWFhYWFhYWE+AAAAAAAAAAAAAAAAAAAaYGFh
        YWFhYWFhYWFhYWFhYWEAAAAAAAAAAAAAAAAAAAROYWFhYWFhYWFhYWFhYWFhPgAAAAAAAAAAAAAAAAAA
        ADBhYWFhYWFhYWFhYWFhYWFhAAAAAAAAAAAAAAAAAAAETmFhYWFhYWFhYWFhYWFhYT4AAAAAAAAAAAAA
        AAAAAAAAOmFhYWFhYWFhYWFhYWFhYQAAAAAAAAAAAAAAAAAABE5hYWFhYWFhYWFhYWFhYWE+AAAAAAAA
        AAAAAAAAAAAAAgRPYWFhYWFhYWFhYWFhYWEAAAAAAAAAAAAAAAAAAAROYWFhYWFhYWFhYWFhYWFhPgAA
        AAAAAAAAAAAAAAAAAAAACmFhYWFhYWFhYWFhYWFhAAAAAAAAAAAAAAAAAAAETmFhYWFhYWFhYWFhYWFh
        YT4AAAAAAAAAAAAAAAAAAAAAAAAeYWFhYWFhYWFhYWFhYQAAAAAAAAAAAAAAAAAABE5hYWFhYWFhYWFh
        YWFhYWE+AAAAAAAAAAAAAAAAAAAAAAAAADVhYWFhYWFhYWFhYWEAAAAAAAAAAAAAAAAAAAROYWFhYWFh
        YWFhYWFhYWFhPgAAAAAAAAAAAAAAAAAAAAAAAAAAQWFhYWFhYWFhYWFhAAAAAAAAAAAAAAAAAAAETmFh
        YWFhYWFhYWFhYWFhYT4AAAAAAAAAAAAAAAAAAAAAAAAAAAhXYWFhYWFhYWFhYQAAAAAAAAAAAAAAAAAA
        BFBhYWFhYWFhYWFhYWFhYWFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD15hYWFhYWFhYWEAAAAAAAAAAAAA
        AAAAAAMvMzMzMzMzMzMzMzMzMzM0KQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgMzMzMzMzMzMzAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>